using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace AirlineTicketsBooking
{
    public partial class KorisnikRezervacije : Window
    {

        public KorisnikRezervacije()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                int id = int.Parse(Application.Current.Properties["ID"].ToString());
                BazaDataContext bdc = new BazaDataContext();
                var query =
                from Rezervacija in bdc.Rezervacijas
                where Rezervacija.IDKorisnika == id
                select new { Rezervacija.ID, Rezervacija.IPKorisnika, Rezervacija.AKNaziv, Rezervacija.Sedista, Rezervacija.Klasa, Rezervacija.PolazakDrzava, Rezervacija.PolazakGrad, Rezervacija.DestinacijaDrzava, Rezervacija.DestinacijaGrad, Rezervacija.PolazakDatum, Rezervacija.Polazak, Rezervacija.DolazakDatum, Rezervacija.Dolazak, Rezervacija.PovratakPolazakVreme, Rezervacija.PovratakPolazakDatum, Rezervacija.PovratakDolazakVreme, Rezervacija.PovratakDolazakDatum, Rezervacija.Cena, Rezervacija.Karta };


                dataGrid_reservations.ItemsSource = query.ToList();
                dataGrid_reservations.Items.Refresh();
                if (dataGrid_reservations.Items.IsEmpty)
                {
                    dataGrid_reservations.Visibility = Visibility.Hidden;
                    label_nemarez.Visibility = Visibility.Visible;
                    editrez_btn.Visibility = Visibility.Hidden;
                    deleteraz_btn.Visibility = Visibility.Hidden;
                }
                else
                {
                    dataGrid_reservations.Visibility = Visibility.Visible;
                    label_nemarez.Visibility = Visibility.Hidden;
                    editrez_btn.Visibility = Visibility.Visible;
                    deleteraz_btn.Visibility = Visibility.Visible;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Došlo je do greške! " + ex,
                        "Obaveštenje, MessageBoxButton.OK, MessageBoxImage.Warning");
            }
        }
            
        private void close_btn_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.Properties.Remove("ID");
            this.Hide();
            Login log = new Login();
            log.ShowDialog();
            dataGrid_reservations.ItemsSource = null;
        }

        private void minimize_btn_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void home_btn_Click(object sender, RoutedEventArgs e)
        {
            this.Hide();
            KorisnikPocetna kp = new KorisnikPocetna();
            kp.ShowDialog();
        }

        private void rezervacije_btn_Click(object sender, RoutedEventArgs e)
        {
            this.Hide();
            KorisnikRezervacije kr = new KorisnikRezervacije();
            kr.ShowDialog();
        }
        private void letovi_btn_Click(object sender, RoutedEventArgs e)
        {
            this.Hide();
            KorisnikLetovi kl = new KorisnikLetovi();
            kl.ShowDialog();
        }

        private void logout_btn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Application.Current.Properties.Remove("ID");
                this.Hide();
                Login log = new Login();
                log.ShowDialog();
            }
            catch(Exception ex)
            {
                MessageBox.Show("Došlo je do greške! ",
                        "Obaveštenje, MessageBoxButton.OK, MessageBoxImage.Warning");
            }
        }

        private void move(object sender, MouseButtonEventArgs e)
        {
            DragMove();
        }

        private void dataGrid_reservations_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dataGrid_reservations.Columns[0].Header = "ID"; dataGrid_reservations.Columns[1].Header = "Ime i prezime"; dataGrid_reservations.Columns[2].Header = "Prevoznik"; dataGrid_reservations.Columns[3].Header = "Sedista"; dataGrid_reservations.Columns[4].Header = "Klasa"; dataGrid_reservations.Columns[5].Header = "Polazak - drzava"; dataGrid_reservations.Columns[6].Header = "Polazak - grad";
            dataGrid_reservations.Columns[7].Header = "Destinacija - drzava"; dataGrid_reservations.Columns[8].Header = "Destinacija - grad"; dataGrid_reservations.Columns[9].Header = "Datum polaska"; dataGrid_reservations.Columns[10].Header = "Vreme polaska"; dataGrid_reservations.Columns[11].Header = "Datum dolaska"; dataGrid_reservations.Columns[12].Header = "Vreme dolaska"; dataGrid_reservations.Columns[13].Header = "Cena"; dataGrid_reservations.Columns[14].Header = "Karta";
        }
        //BRISANJE Rezervacija
        private void closecandr_btn_Click(object sender, RoutedEventArgs e)
        {
            canvas_delrez.Visibility = Visibility.Hidden;
            obrrez_cb.Items.Clear();
        }

        private void deleteraz_btn_Click(object sender, RoutedEventArgs e)
        {
            canvas_delrez.Visibility = Visibility.Visible;
            obrrez_cb.Items.Clear();
            try
            {
                int id = int.Parse(Application.Current.Properties["ID"].ToString());
                BazaDataContext bdc = new BazaDataContext();
                var upit =
                from Rezervacija in bdc.Rezervacijas
                where Rezervacija.IDKorisnika == id
                select Rezervacija.ID;

                foreach (var item in upit)
                {
                    obrrez_cb.Items.Add(item);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Došlo je do greške! " + ex,
                        "Obaveštenje, MessageBoxButton.OK, MessageBoxImage.Warning");
            }
        }

        private void obrisirez_btn_Click(object sender, RoutedEventArgs e)
        {
            if (obrrez_cb.Text != String.Empty)
            {
                try
                {
                    BazaDataContext bdc = new BazaDataContext();

                    //automatsko podesavanje mesta prilikom brisanja
                    var aquery =
                    from Rezervacija in bdc.Rezervacijas
                    where Rezervacija.ID.Equals(obrrez_cb.Text)
                    select Rezervacija;

                    var ares = aquery.SingleOrDefault();

                    var aquery1 =
                    from Let in bdc.Lets
                    where Let.ID == ares.IDLeta
                    select Let;

                    var ares1 = aquery1.SingleOrDefault();

                    if (ares.Karta == "Jedan pravac")
                    {
                        ares1.SedistaPolazak = ares1.SedistaPolazak + ares.Sedista;
                        bdc.SubmitChanges();
                    }
                    else
                    {
                        ares1.SedistaPolazak = ares1.SedistaPolazak + ares.Sedista;
                        ares1.SedistaPovratak = ares1.SedistaPovratak + ares.Sedista;
                        bdc.SubmitChanges();
                    }

                    //brisanje Rezervacija
                    int broj = int.Parse(obrrez_cb.SelectedValue.ToString());


                    int id = int.Parse(Application.Current.Properties["ID"].ToString());
                    var query =
                    from Rezervacija in bdc.Rezervacijas
                    where Rezervacija.IDKorisnika == id
                    select new { Rezervacija.IPKorisnika, Rezervacija.AKNaziv, Rezervacija.Sedista, Rezervacija.Klasa, Rezervacija.PolazakDrzava, Rezervacija.PolazakGrad, Rezervacija.DestinacijaDrzava, Rezervacija.DestinacijaGrad, Rezervacija.PolazakDatum, Rezervacija.Polazak, Rezervacija.DolazakDatum, Rezervacija.Dolazak, Rezervacija.PovratakPolazakVreme, Rezervacija.PovratakPolazakDatum, Rezervacija.PovratakDolazakVreme, Rezervacija.PovratakDolazakDatum, Rezervacija.Cena };

                    var upit = from Rezervacija in bdc.Rezervacijas
                               where Rezervacija.ID == broj
                               select Rezervacija;


                    bdc.Rezervacijas.DeleteAllOnSubmit(upit);
                    bdc.SubmitChanges();
                    dataGrid_reservations.ItemsSource = null;
                    dataGrid_reservations.ItemsSource = query;
                    dataGrid_reservations.Items.Refresh();
                    MessageBox.Show("Uspesno ste obrisali rezervaciju!", "Potvrda", MessageBoxButton.OK, MessageBoxImage.Information);
                    obrrez_cb.SelectedIndex = -1;
                    obrrez_cb.Items.Clear();
                    canvas_delrez.Visibility = Visibility.Hidden;
                    this.Hide();
                    KorisnikRezervacije kr = new KorisnikRezervacije();
                    kr.ShowDialog();
                }
                catch (System.Data.SqlClient.SqlException fe)
                {
                    MessageBox.Show("Došlo je do greške! " + fe,
                            "Obaveštenje", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
            }
            else
            {
                MessageBox.Show("Polje 'ID rezervacije za brisanje' mora biti popunjeno!",
                            "INFO", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }
        //IZMENA Rezervacija
        private void editrez_btn_Click(object sender, RoutedEventArgs e)
        {
            canvas_erez.Visibility = Visibility.Visible;
            erez_cb.Items.Clear();
            try
            {
                int id = int.Parse(Application.Current.Properties["ID"].ToString());
                BazaDataContext bdc = new BazaDataContext();
                var upit =
                from Rezervacija in bdc.Rezervacijas
                where Rezervacija.IDKorisnika == id
                select Rezervacija.ID;

                foreach (var item in upit)
                {
                    erez_cb.Items.Add(item);
                }
            }
            catch (Exception fe)
            {
                MessageBox.Show("Došlo je do greške! " + fe,
                        "Obaveštenje, MessageBoxButton.OK, MessageBoxImage.Warning");
            }
        }

        private void eklasu_btn_Click(object sender, RoutedEventArgs e)
        {
            if (eklasa_cb.Text != String.Empty)
            {
                try
                {
                    using (BazaDataContext DC = new BazaDataContext())
                    {
                        int id = int.Parse(Application.Current.Properties["ID"].ToString());
                        var query =
                        from Rezervacija in DC.Rezervacijas
                        where Rezervacija.IDKorisnika == id
                        select new { Rezervacija.IPKorisnika, Rezervacija.AKNaziv, Rezervacija.Sedista, Rezervacija.Klasa, Rezervacija.PolazakDrzava, Rezervacija.PolazakGrad, Rezervacija.DestinacijaDrzava, Rezervacija.DestinacijaGrad, Rezervacija.PolazakDatum, Rezervacija.Polazak, Rezervacija.DolazakDatum, Rezervacija.Dolazak, Rezervacija.PovratakPolazakVreme, Rezervacija.PovratakPolazakDatum, Rezervacija.PovratakDolazakVreme, Rezervacija.PovratakDolazakDatum, Rezervacija.Cena };


                        var test = from Rezervacija in DC.Rezervacijas
                                   where Rezervacija.ID.Equals(erez_cb.Text)
                                   select Rezervacija;

                        var rez = test.FirstOrDefault();
                        rez.Klasa = eklasa_cb.Text;

                        //automatsko podesavanje cene prilikom menjanja klase
                        var aquery =
                        from Rezervacija in DC.Rezervacijas
                        where Rezervacija.ID.Equals(erez_cb.Text)
                        select Rezervacija;

                        var ares = aquery.SingleOrDefault();

                        var aquery1 =
                        from Let in DC.Lets
                        where Let.ID == ares.IDLeta
                        select Let;

                        var ares1 = aquery1.SingleOrDefault();

                        int rezervisanomesta, izmenamesta;
                        int.TryParse(rezmesta_tb.Text, out rezervisanomesta);
                        int.TryParse(emesta_cb.Text, out izmenamesta);

                        if (ares.Karta == "Jedan pravac")
                        {
                            if (eklasa_cb.Text == "Ekonomska")
                            {
                                //izracunavanje cene
                                ares.Cena = ares1.CenaEkonomska - 190 * rezervisanomesta;
                            }
                            else if (eklasa_cb.Text == "Biznis")
                            {
                                //izracunavanje cene
                                ares.Cena = ares1.CenaBiznis - 190 * rezervisanomesta;
                            }
                            else
                            {
                                //izracunavanje cene
                                ares.Cena = ares1.CenaPrva - 190 * rezervisanomesta;
                            }
                        }
                        else
                        {
                            if (eklasa_cb.Text == "Ekonomska")
                            {
                                //izracunavanje cene
                                ares.Cena = ares1.CenaEkonomska * rezervisanomesta;
                            }
                            else if (eklasa_cb.Text == "Biznis")
                            {
                                //izracunavanje cene
                                ares.Cena = ares1.CenaBiznis * rezervisanomesta;
                            }
                            else
                            {
                                //izracunavanje cene
                                ares.Cena = ares1.CenaPrva * rezervisanomesta;
                            }
                        }
                        //////////////////////////////////////////////////////////////////////


                        DC.SubmitChanges();

                        dataGrid_reservations.ItemsSource = null;
                        dataGrid_reservations.ItemsSource = query;
                        dataGrid_reservations.Items.Refresh();

                        MessageBox.Show("Uspesno ste izmenili klasu vase rezervacije!", "Potvrda", MessageBoxButton.OK, MessageBoxImage.Information);
                        erez_cb.SelectedIndex = -1;
                        eklasa_cb.SelectedIndex = -1;
                        emesta_cb.SelectedIndex = -1;
                        canvas_erez.Visibility = Visibility.Hidden;
                        this.Hide();
                        KorisnikRezervacije kr = new KorisnikRezervacije();
                        kr.ShowDialog();
                    }
                }
                catch (System.Data.SqlClient.SqlException fe)
                {
                    MessageBox.Show("Došlo je do greške! " + fe,
                            "Obaveštenje, MessageBoxButton.OK, MessageBoxImage.Warning");
                }
            }
            else
            {
                MessageBox.Show("Polje 'Klasa' mora biti popunjeno!",
                            "INFO", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void emesta_btn_Click(object sender, RoutedEventArgs e)
        {

            if (emesta_cb.Text != String.Empty)
            {
                try
                {
                    using (BazaDataContext DC = new BazaDataContext())
                    {
                        int id = int.Parse(Application.Current.Properties["ID"].ToString());
                        var query =
                        from Rezervacija in DC.Rezervacijas
                        where Rezervacija.IDKorisnika == id
                        select new { Rezervacija.IPKorisnika, Rezervacija.AKNaziv, Rezervacija.Sedista, Rezervacija.Klasa, Rezervacija.PolazakDrzava, Rezervacija.PolazakGrad, Rezervacija.DestinacijaDrzava, Rezervacija.DestinacijaGrad, Rezervacija.PolazakDatum, Rezervacija.Polazak, Rezervacija.DolazakDatum, Rezervacija.Dolazak, Rezervacija.PovratakPolazakVreme, Rezervacija.PovratakPolazakDatum, Rezervacija.PovratakDolazakVreme, Rezervacija.PovratakDolazakDatum, Rezervacija.Cena };

                        var test = from Rezervacija in DC.Rezervacijas
                                   where Rezervacija.ID.Equals(erez_cb.Text)
                                   select Rezervacija;

                        var rez = test.FirstOrDefault();

                        rez.Sedista = int.Parse(emesta_cb.Text);

                        //automatsko podesavanje mesta i cene prilikom izmene mesta
                        var aquery =
                        from Rezervacija in DC.Rezervacijas
                        where Rezervacija.ID.Equals(erez_cb.Text)
                        select Rezervacija;

                        var ares = aquery.SingleOrDefault();

                        var aquery1 =
                        from Let in DC.Lets
                        where Let.ID == ares.IDLeta
                        select Let;

                        var ares1 = aquery1.SingleOrDefault();


                       
                            int rezervisanomesta, izmenamesta;
                            int.TryParse(rezmesta_tb.Text, out rezervisanomesta);
                            int.TryParse(emesta_cb.Text, out izmenamesta);
                        int razlikax = izmenamesta - rezervisanomesta;
                        if (ares1.SedistaPolazak >= razlikax)
                        {
                       
                            if (ares.Karta == "Jedan pravac")
                            {
                                if (int.Parse(rezmesta_tb.Text) <= int.Parse(emesta_cb.Text))
                                {
                                    //mesta
                                    int razlika = izmenamesta - rezervisanomesta;
                                    ares1.SedistaPolazak = ares1.SedistaPolazak - razlika;
                                    //izracunavanje cene
                                    ares.Cena = (ares.Cena / rezervisanomesta) * izmenamesta;
                                }
                                else
                                {
                                    //mesta
                                    int razlika = rezervisanomesta - izmenamesta;
                                    ares1.SedistaPolazak = ares1.SedistaPolazak + razlika;
                                    //izracunavanje cene
                                    ares.Cena = (ares.Cena / rezervisanomesta) * izmenamesta;
                                }
                            }
                            else
                            {
                                if (int.Parse(rezmesta_tb.Text) <= int.Parse(emesta_cb.Text))
                                {
                                    //mesta
                                    int razlika = izmenamesta - rezervisanomesta;
                                    ares1.SedistaPolazak = ares1.SedistaPolazak - razlika;
                                    ares1.SedistaPovratak = ares1.SedistaPovratak - razlika;
                                    //izracunavanje cene
                                    ares.Cena = (ares.Cena / rezervisanomesta) * izmenamesta;
                                }
                                else
                                {
                                    //mesta
                                    int razlika = rezervisanomesta - izmenamesta;
                                    ares1.SedistaPolazak = ares1.SedistaPolazak + razlika;
                                    ares1.SedistaPovratak = ares1.SedistaPovratak + razlika;
                                    //izracunavanje cene
                                    ares.Cena = (ares.Cena / rezervisanomesta) * izmenamesta;
                                }
                            }
                            /////////////////////////////////////////////////

                            DC.SubmitChanges();

                            dataGrid_reservations.ItemsSource = null;
                            dataGrid_reservations.ItemsSource = query;
                            dataGrid_reservations.Items.Refresh();

                            MessageBox.Show("Uspesno ste izmenili mesta vase rezervacije!", "Potvrda", MessageBoxButton.OK, MessageBoxImage.Information);
                            erez_cb.SelectedIndex = -1;
                            eklasa_cb.SelectedIndex = -1;
                            emesta_cb.SelectedIndex = -1;
                            canvas_erez.Visibility = Visibility.Hidden;
                            this.Hide();
                            KorisnikRezervacije kr = new KorisnikRezervacije();
                            kr.ShowDialog();

                        }
                        else
                        {
                            MessageBox.Show("Uneli ste veći broj mesta nego sto je preostalo!", "Potvrda", MessageBoxButton.OK, MessageBoxImage.Warning);
                        }
                    }
                }
                catch (System.Data.SqlClient.SqlException fe)
                {
                    MessageBox.Show("Došlo je do greške! " + fe,
                            "Obaveštenje, MessageBoxButton.OK, MessageBoxImage.Warning");
                }
            }
            else
            {
                MessageBox.Show("Polje 'Mesta' mora biti popunjeno!",
                            "INFO", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void erez_cb_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                BazaDataContext bdc = new BazaDataContext();
                var upit1 =
                from Rezervacija in bdc.Rezervacijas
                where Rezervacija.ID == (Convert.ToInt32(erez_cb.SelectedValue))
                select Rezervacija;

                var rez = upit1.SingleOrDefault();
                if (rez == null)
                {
                    //erez_cb.Items.Clear();
                    rezklasa_tb.Text = "";
                    rezmesta_tb.Text = "";
                }
                else
                {
                    rezklasa_tb.Text = rez.Klasa;
                    rezmesta_tb.Text = rez.Sedista.ToString();
                }
            }
            catch (Exception fe)
            {
                MessageBox.Show("Došlo je do greške! " + fe,
                        "Obaveštenje, MessageBoxButton.OK, MessageBoxImage.Warning");
            }
        }

        private void closecaner_btn_Click(object sender, RoutedEventArgs e)
        {
            canvas_erez.Visibility = Visibility.Hidden;
            erez_cb.Items.Clear();
            erez_cb.SelectedIndex = -1;
            rezklasa_tb.Text = "";
            rezmesta_tb.Text = "";
            eklasa_cb.SelectedIndex = -1;
            emesta_cb.SelectedIndex = -1;
        }
    }
}
